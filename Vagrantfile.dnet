# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "trusty32"
###  config.vm.provision :shell, path: "init_base.sh"
	config.vm.boot_timeout = 300

#### client.conf
  config.vm.define "client" do |client|
    client.vm.box = "trusty32"
		client.vm.hostname = "client"
    client.vm.provision :shell, inline: 'sudo apt-get -y install lynx'

		client.vm.network :private_network, ip:"192.168.1.33",
			virtualbox__intnet: "my_second_private_network"

  client.vm.provider :virtualbox do |vb|
  # # Don't boot with headless mode
  # vb.gui = true
  #
  # # Use VBoxManage to customize the VM. For example to change memory:
  # vb.customize ["modifyvm", :id, "--memory", "1024"]
      vb.name = "client"
      vb.customize ["modifyvm", :id, "--memory", "384"]
  end
  end


#### server.conf
  config.vm.define "server" do |server|
    server.vm.box = "trusty32"
		server.vm.hostname = "server"
    server.vm.provision :shell, inline: 'sudo apt-get -y install apache2 php5 libapache2-mod-php5 php5-mcrypt mysql-server php5-mysql php5-cli'

		server.vm.network :private_network, ip:"192.168.0.11",
			virtualbox__intnet: "my_private_network"

  server.vm.provider :virtualbox do |vb|
  # # Don't boot with headless mode
  # vb.gui = true
  #
  # # Use VBoxManage to customize the VM. For example to change memory:
  # vb.customize ["modifyvm", :id, "--memory", "1024"]
###      vb.name = "server"
      vb.customize ["modifyvm", :id, "--memory", "512"]
  end
  end


#### ids.conf
  config.vm.define "ids" do |ids|
    ids.vm.box = "trusty32"
		ids.vm.hostname = "ids"
###    ids.vm.provision :shell, inline: 'ip addr flush dev eth1 && ip addr flush dev eth2 && brctl addbr br0 && brctl addif br0 eth1 eth2 && ip link set dev br0 up'
		## ids.vm.network :private_network, ip:"192.168.0.22",
		ids.vm.network :private_network, ip:"",
                  auto_config: false,
			virtualbox__intnet: "my_private_network"
		ids.vm.network :private_network, ip:"",
                  auto_config: false,
			virtualbox__intnet: "my_second_private_network"
  ids.vm.provider :virtualbox do |vb|
  # # Don't boot with headless mode
##  vb.gui = true
  #
  # # Use VBoxManage to customize the VM. For example to change memory:
  # vb.customize ["modifyvm", :id, "--memory", "1024"]
      vb.name = "ids"
      vb.customize ["modifyvm", :id, "--memory", "1024"]
  end
  end


  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  # config.vm.box_url = "http://domain.com/path/to/above.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  ####config.vm.network :private_network, ip: "192.168.24.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider :virtualbox do |vb|
  # # Don't boot with headless mode
  # vb.gui = true
  #
  # # Use VBoxManage to customize the VM. For example to change memory:
  # vb.customize ["modifyvm", :id, "--memory", "1024"]
      vb.name = "server"
      vb.customize ["modifyvm", :id, "--memory", "384"]
  end
  #
  # View the documentation for the provider you're using for more
  # information on available options.

  # Enable provisioning with Puppet stand alone. Puppet manifests
  # are contained in a directory path relative to this Vagrantfile.
  # You will need to create the manifests directory and a manifest in
  # the file IDS.pp in the manifests_path directory.
  #
  # An example Puppet manifest to provision the message of the day:
  #
  # # group { "puppet":
  # # ensure => "present",
  # # }
  # #
  # # File { owner => 0, group => 0, mode => 0644 }
  # #
  # # file { '/etc/motd':
  # # content => "Welcome to your Vagrant-built virtual machine!
  # # Managed by Puppet.\n"
  # # }
  #
  # config.vm.provision :puppet do |puppet|
  # puppet.manifests_path = "manifests"
  # puppet.manifest_file = "init.pp"
  # end

  # Enable provisioning with chef solo, specifying a cookbooks path, roles
  # path, and data_bags path (all relative to this Vagrantfile), and adding
  # some recipes and/or roles.
  #
  # config.vm.provision :chef_solo do |chef|
  # chef.cookbooks_path = "../my-recipes/cookbooks"
  # chef.roles_path = "../my-recipes/roles"
  # chef.data_bags_path = "../my-recipes/data_bags"
  # chef.add_recipe "mysql"
  # chef.add_role "web"
  #
  # # You may also specify custom JSON attributes:
  # chef.json = { :mysql_password => "foo" }
  # end

  # Enable provisioning with chef server, specifying the chef server URL,
  # and the path to the validation key (relative to this Vagrantfile).
  #
  # The Opscode Platform uses HTTPS. Substitute your organization for
  # ORGNAME in the URL and validation key.
  #
  # If you have your own Chef Server, use the appropriate URL, which may be
  # HTTP instead of HTTPS depending on your configuration. Also change the
  # validation key to validation.pem.
  #
  # config.vm.provision :chef_client do |chef|
  # chef.chef_server_url = "https://api.opscode.com/organizations/ORGNAME"
  # chef.validation_key_path = "ORGNAME-validator.pem"
  # end
  #
  # If you're using the Opscode platform, your validator client is
  # ORGNAME-validator, replacing ORGNAME with your organization name.
  #
  # If you have your own Chef Server, the default validation client name is
  # chef-validator, unless you changed the configuration.
  #
  # chef.validation_client_name = "ORGNAME-validator"
end
